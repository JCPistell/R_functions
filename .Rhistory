ls()
.libPaths()
install.packages("ggplot2")
library(ggplot2)
x <- rnorm(100)
y <- rnorm(100_)
y <- rnorm(100)
plot(x, y)
data(mtcars)
g <- ggplot(data=mtcars, aes(y=mpg, x=hp, colour = factor(cyl)))
g + geom_point(size = 3)
install.packages("dplyr")
install.packages(devtools)
install.packages("devtools")
.libPaths()
getwd()
setwd("~/Scripts")
ls()
x <- rnorm(100)
y <- rnorm(100)
fit <- lm(y~x)
fit
summary(fit)
str(fit)
fit$coefficients
fit$residuals
plot(x, y)
abline(fit)
summary(fit)
qqplot(fit)
?qqplot
qqplot(x, y)
data(mtcars)
mtcars
pairs(mtcars)
cars <- mtcars[,1:5]
cars
pairs(cars)
pairs(cars, col="steelblue")
pairs(cars, col=mpg)
pairs(cars, col=cars$mpg)
?plot
plot(cars$hp, cars$mpg, col=factor(cars$cyl))
plot(cars$hp, cars$mpg, col=factor(cars$cyl), cex=18)
plot(cars$hp, cars$mpg, col=factor(cars$cyl), cex=22)
plot(cars$hp, cars$mpg, col=factor(cars$cyl), cex=4)
plot(cars$hp, cars$mpg, col=factor(cars$cyl), cex=2)
?plot
plot(cars$hp, cars$mpg, col=factor(cars$cyl), cex=2, pch=16)
install.packages("caret")
install.packages("jsonlite")
x <- c("RMySQL", "tidyr", "stringr", "lubridate", "htmlwidgets", "googleVis", "shiny", "xtable", "zoo", "xts", "quantmod", "parallel", "data.table", "XML")
install.packages(x)
require(devtools)
install_github('rCharts', 'ramnathv')
install_github(ramnathv/slidify)
install_github("ramnathv/slidify")
install_github("ramnathv/slidifyLibraries")
x <- c(1,2,5)
x+1
x+ c(1, 2, 3)
x+c(1,6)
install.packages("RColorBrewer")
palette()
library(RColorBrewer)
x <- brewer.pal(8, "Dark2")
palette(x)
palette()
data(mtcars)
plot(mtcars$wt, mtcars$mpg, pch = 16, col = factor(mtcars$cyl))
display.brewer.all()
palette(brewer.pal(8, "Accent"))
palette()
plot(mtcars$wt, mtcars$mpg, pch = 16, col = factor(mtcars$cyl))
palette(brewer.pal(3, "Accent"))
plot(mtcars$wt, mtcars$mpg, pch = 16, col = factor(mtcars$cyl))
palette("default")
palette()
palette(brewer.pal(8, "Accent"))
q()
palette()
data <- read.csv("Animals2.csv")
head(data)
library(ggplot2)
g <- ggplot(data = data, aes(x = body, y=brain))
g _ geom_point()
g + geom_point()
g <- ggplot(data = data, aes(x = body, y=brain, label=x))
g + geom_point(size = 3, colour = "lightblue") + geom_text()
g <- ggplot(data = data, aes(x = body, y=brain, label=X))
g + geom_point(size = 3, colour = "lightblue") + geom_text()
getwd()
q()
x <- (1, 2, 3, 4)
x <- c(1, 2, 3, 4)
y <- c(5, 6)
x + y
?append
append(x, y)
append(x, y, after = 2)
c(x, y)
x[2] <- 8
x
?array
x <- 3
x
x <- 5
x
x <- 3 + 5
x
x <- mean(rnorm(100))
x
class(x)
class(z)
x <- "dog"
x
class(x)
x <- bird
x <- list(a = "one", b = "tw0", c = 3)
x
x$a
x$b
x$c
nested <- list(a = "dog", b = "cat", c = list(dinosaur = "trex", bird = "crow"))
nested
nested$c
nested$c$dinosaur
nested
nested[1]
nested[2]
nested[3]
x <- (1, 3, 5, 7)
x <- c(1, 3, 5, 7)
vector <- c(2, 4, 6, 8)
x
vector
x[1]
x[2]
x[6]
pets <- c("dog", "cat", "dragon")
pets
pets[1]
test <- c(1, "two")
test
test[1] + 3
data(mtcars)
mtcars
View(mtcars)
class(mtcars)
head(mtcars)
names(mtcars)
n <- names(mtcars)
n[3]
names(mtcars)[1] <- "MPG"
tail(mtcars)
head(mtcars, 10)
?head
mtcars[1,1]
mtcars[c(1, 3), 2]
1:10
mtcars[1:5, 2]
mtcars[,2]
mtcars[1,]
mtcars$MPG
mean(mtcars$MPG)
median(mtcars$MPG)
mtcars$meanMPG <- mean(mtcars$MPG)
head(mtcars)
View(mtcars)
cars <- mtcars[c(1,12, 3:11),]
head(cars)
View(cars)
cars <- mtcars[c(1,12, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),]
View(cars)
cars <- mtcars[,c(1,12, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)]
cars <- mtcars[,c(1,12, 3:11)]
x <- c(1, 3, 5, 7)
y <- c(2, 4)
x + y
c(x, y)
y <- c(2, 4, 6)
x + y
fit <- lm(MPG ~ hp)
fit <- lm(MPG ~ hp, ddata = mtcars)
fit <- lm(MPG ~ hp, data = mtcars)
fit
class(fit)
str(fit)
summary(fit)
str(summary(fit))
summary(fit)$r.squared
fit <- lm(MPG ~ . , data = mtcars)
summary(fit)
mtcars$cyl <- as.factor(mtcars$cyl)
class(mtcars$cyl)
mtcars$cyl
fit <- lm(MPG ~ ., data = mtcars)
summary(fit)
?read.csv
View(mtcars)
mtcars[3,]
plot(mtcars$wt, mtcars$MPG)
plot(mtcars$wt, mtcars$MPG, type = "l")
plot(mtcars$wt, mtcars$MPG, cex = 5)
plot(mtcars$wt, mtcars$MPG, cex = 5, pch = 16)
plot(mtcars$wt, mtcars$MPG, cex = 1.3, pch = 16)
plot(mtcars$wt, mtcars$MPG, cex = 1.3, pch = 12)
plot(mtcars$wt, mtcars$MPG, cex = 1.3, pch = 12, col = "red")
plot(mtcars$wt, mtcars$MPG, cex = 1.3, pch = 16, col = "red")
plot(mtcars$wt, mtcars$MPG, cex = 1.3, pch = 16, col = mtcars$cyl)
plot(mtcars$wt, mtcars$MPG, cex = 1.3, pch = mtcars$cyl, col = "red")
boxplot(mtcars$MPG, mtcars$cyl)
q()
setwd("~/Google Drive/Classes/Fall/DataAnalytics/")
list.files()
?write.csv
mean()
mean
read.csv
methods(mean)
getAnywhere(mean.default)
ls()
rm(list = ls())
ls()
list.files()
load('boulder-cleaned.RData', .GlobalEnv)
ls()
head(boulder.clean)
head(boulder.clean)
hist(boulder.clean$LIST.PRICE)
pdf(file = 'listprice.pdf')
hist(boulder.clean$LIST.PRICE)
dev.off()
list.files()
plot(density(boulder.clean$LIST.PRICE))
barplot(table(boulder.clean$HOME.TYPE))
dplot <- plot(density(boulder.clean$LIST.PRICE))
bplot <- barplot(table(boulder.clean$HOME.TYPE))
ls()
box1 <- boxplot(boulder.clean$LIST.PRICE)
box2 <- boxplot(LIST.PRICE ~ HOME.TYPE, data = boulder.clean, ylab = "List Price")
str(boulder.clean)
with(boulder.clean, plot(BEDS, LIST.PRICE, main = 'List Price vs. Number of Beds,
type = 'n'))
naplot <- with(boulder.clean, plot(BEDS, LIST.PRICE, main = 'List Price vs. Number of Beds, type = 'n'))
naplot <- with(boulder.clean, plot(BEDS, LIST.PRICE, main = 'List Price vs. Number of Beds', type = 'n'))
with(subset(boulder.clean, HOME.TYPE != "Single Family Residential"), points(BEDS, LIST.PRICE, col = 'red'))
legend("topright", pch=1, col = c("blue", "red"), legend = c("SFH", "Other"))
ls()
dplot
bplot
print(dplot)
box1
show(dplot)
box1 <- boxplot(boulder.clean$LIST.PRICE)
box2 <- boxplot(LIST.PRICE ~ HOME.TYPE, data = boulder.clean, ylab = "List Price")
pdf(file='pointsplot.pdf')
naplot <- with(boulder.clean, plot(BEDS, LIST.PRICE, main = 'List Price vs. Number of Beds', type = 'n'))
with(subset(boulder.clean, HOME.TYPE != "Single Family Residential"), points(BEDS, LIST.PRICE, col = 'red'))
legend("topright", pch=1, col = c("blue", "red"), legend = c("SFH", "Other"))
dev.off()
naplot <- with(boulder.clean, plot(BEDS, LIST.PRICE, main = 'List Price vs. Number of Beds', type = 'n'))
with(subset(boulder.clean, HOME.TYPE != "Single Family Residential"), points(BEDS, LIST.PRICE, col = 'red'))
legend("topright", pch=1, col = c("blue", "red"), legend = c("SFH", "Other"))
with(boulder.clean, plot (BEDS, LIST.PRICE, main = "List Price vs. Number of Beds"))
with(boulder.clean, text(BEDS, LIST.PRICE, ADDRESS, cex=0.6, pos=4))
with(boulder.clean, plot (BEDS, LIST.PRICE, main = "List Price vs. Number of Beds"))
with(boulder.clean, abline(h=median(LIST.PRICE), v=median(BEDS)))
pdf(file='pointsplot.pdf')
naplot <- with(boulder.clean, plot(BEDS, LIST.PRICE, main = 'List Price vs. Number of Beds', type = 'n'))
with(subset(boulder.clean, HOME.TYPE != "Single Family Residential"), points(BEDS, LIST.PRICE, col = 'red'))
with(subset(boulder.clean, HOME.TYPE == "Single Family Residential"), points(BEDS, LIST.PRICE, col = 'blue'))
legend("topright", pch=1, col = c("blue", "red"), legend = c("SFH", "Other"))
dev.off()
pdf(file = "textgraph.pdf")
with(boulder.clean, plot (BEDS, LIST.PRICE, main = "List Price vs. Number of Beds"))
with(boulder.clean, text(BEDS, LIST.PRICE, ADDRESS, cex=0.6, pos=4))
dev.off()
pdf(file = "linesgraph.pdf")
with(boulder.clean, plot (BEDS, LIST.PRICE, main = "List Price vs. Number of Beds"))
with(boulder.clean, abline(h=median(LIST.PRICE), v=median(BEDS)))
dev.off()
list.files()
fit <- lm(LIST.PRICE ~ BEDS, data=boulder.clean)
summary(fit)
pdf(file = "lmline.pdf")
with(boulder.clean, plot (BEDS, LIST.PRICE, main = "List Price vs. Number of Beds"))
abline(fit, lwd=2)
dev.off()
par(mfrow = c(1, 2), mar = c(4,4,2,1), oma = c(0, 0, 2, 0))
with(boulder.clean, {
plot(BEDS, LIST.PRICE, main = "List Price vs. Number of Beds")
plot(BATHS, LIST.PRICE, main = "List Price vs. Number of Baths")
mtext("Real Estate List Price in Boulder", outer = TRUE, cex = 1.5)
})
?par
pdf(file = "splitplot.pdf")
par(mfrow = c(1, 2), mar = c(4,4,2,1), oma = c(0, 0, 2, 0))
with(boulder.clean, {
plot(BEDS, LIST.PRICE, main = "List Price vs. Number of Beds")
plot(BATHS, LIST.PRICE, main = "List Price vs. Number of Baths")
mtext("Real Estate List Price in Boulder", outer = TRUE, cex = 1.5)
})
dev.off()
ls()
rm(box1, box2, bplot, dplot, fit, naplot)
ls()
q()
ls()
getwd()
list.files()
source("lr.R")
ls()
view(boulder.clean)
View(boulder.clean)
tapply(boulder.clean$LIST.PRICE,boulder.clean$BEDS,mean)
lapply(boulder.clean[,c('BEDS','BATHS')],sd,na.rm=TRUE)
sapply(boulder.clean[,c('BEDS','BATHS')],sd,na.rm=TRUE)
apply(boulder.clean[,c('BEDS','BATHS')],2,sd,na.rm=TRUE)
lapply(boulder.clean[,c('BEDS','BATHS')],sd,na.rm=TRUE)
sapply(boulder.clean[,c('BEDS','BATHS')],sd,na.rm=TRUE)
?sd
x <- c(1, 2, 3, NA, 6)
sd(x)
tapply(boulder.clean$LIST.PRICE,boulder.clean$BEDS,mean)
tapply(boulder.clean$SQFT, boulder.clean$PARKING.TYPE, mean)
ls()
summary(llm.fit)
summary(lm.fit)
class(boulder.clean$PARKING.TYPE)
boulder.clean$PARKING.TYPE
cor(boulder.clean$SQFT, boulder.clean$PARKING.TYPE)
levels(boulder.clean$PARKING.TYPE)
plot(boulder.clean$SQFT, boulder.clean$LIST.PRICE)
lm.fit1 = lm(LIST.PRICE~SQFT*PARKING.TYPE,data=boulder.sfr)
summary(lm.fit1)
?hist
list.files()
colleges <- read.csv("colleges.csv")
##Fix variable names
names(colleges) <- c("CollegeName", "State", "PublicPrivate", "MathSAT", "VerbalSAT",
"ACT", "ApplicationsReceived", "ApplicantsAccepted",
"NewStudentsEnrolled", "NewStudentsFromTop10", "NewStudentsFromTop25",
"FTUndergrad", "PTUndergrad", "InStateTuition","OutStateTuition",
"Room", "Board", "AddFees", "EstBookCosts", "EstPersonal", "FacPHD",
"StudFacRatio", "GraduationRate")
##Factor Public/Private
colleges$PublicPrivate <- as.factor(colleges$PublicPrivate)
levels(colleges$PublicPrivate) <- c("Public", "Private")
View(colleges)
class(colleges$ApplicationsReceived)
class(colleges$ApplicantsAccepted)
plot(colleges$ApplicationsReceived, colleges$ApplicantsAccepted)
getwd()
setwd("~/Scripts/functions_deck/Func/")
list.files()
load("~/Google Drive/Classes/Fall/DataAnalytics/boulder-cleaned.RData")
head(boulder.clean)
